package myRetail.service;

import myRetail.model.Product;
import myRetail.model.DTO.ProductDTO;
import myRetail.repository.ProductRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;

/**
 * A services layer class to handle the business logic interactions
 * between controllers and data layer.
 */
@Service
public class ProductService {
    @Autowired
    private ProductRepository pRepo;


    public Product save(Product product) throws IllegalArgumentException{
        if(product == null){
            throw new IllegalArgumentException("Attempting to save a null product");
        }
        //If the product exists in the db already
        if(product.id != null){
            Product loadProduct = pRepo.findById(product.id);
            if(loadProduct.sequence != product.sequence)
                //throw new illegalArgu
        }
        //the product is new
        if(product.sequence == null || product.sequence == 0){
            List<Product>pList = pRepo.findAll();
            product.sequence = pList.size() + 1;
        }
        Product theReturn = pRepo.save(product);
        return theReturn;
    }

    /**
     * Saves a product DTO into the products table.
     * @param prodDTO - A data transfer object, usually directly from
     *                the API for the purposes of
     * @return - The product generated by saving the altered or new
     * DTO to the database.
     * @throws IllegalArgumentException - If an invalid DTO is provided
     * to the method, it should throw an exception, as it is most likely
     * the API is being given bad information.
     */
    public Product save(ProductDTO prodDTO) throws IllegalArgumentException{
        //If this dto has a sequence number, there should be an existing Product
        if(prodDTO.getId() != 0){
            Product prod = pRepo.findBySequence(prodDTO.getId());
            if(prod == null)
                throw new IllegalArgumentException("The requested product didn't exist");
            else{
                //Update the product if it is valid.
                prod.name = prodDTO.getName();
                prod.price = prodDTO.getPrice();
                return save(prod);
            }
        }
        //we are creating a new product
        Product prod = new Product(prodDTO.getName(), prodDTO.getPrice());
        return save(prod);
    }

    /**
     * Get a list of all products in the system in the form of
     * data transfer objects to be returned by the API
     * @return - A List of ProductDTOs representing all products
     * in the system.
     */
    public List<ProductDTO> getAllDTO(){
        List<Product> prod2 = pRepo.findAll();
        List<ProductDTO> returnList = new ArrayList<>();

        prod2.forEach(
                product -> {
                    returnList.add(dtoFromProduct(product));
                }
        );
        return returnList;
    }
    /**
     * A method to provide a ProductDTO from a full product object.
     * @param product - A member of the Product class to be converted into
     *                a member of this class.
     * @return - A ProductDTO instance ready for API transmission
     */
    public ProductDTO dtoFromProduct(Product product){
        return new ProductDTO(product.sequence, product.name, product.price);
    }
}
